//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfWizard.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("InfWizard.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose the driver type, save location, spawn driver options, etc. Fine tune your usb device parameters.  Optionally save this profile for later use..
        /// </summary>
        internal static string DEVICE_CONFIGURATION_DESCRIPTION {
            get {
                return ResourceManager.GetString("DEVICE_CONFIGURATION_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Device Configuration.
        /// </summary>
        internal static string DEVICE_CONFIGURATION_TITLE {
            get {
                return ResourceManager.GetString("DEVICE_CONFIGURATION_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a USB device to use as a starting point for your new usb device driver.  All parameters are fully configurable on the next screen..
        /// </summary>
        internal static string DEVICE_SELECTION_DESCRIPTION {
            get {
                return ResourceManager.GetString("DEVICE_SELECTION_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Device Selection.
        /// </summary>
        internal static string DEVICE_SELECTION_TITLE {
            get {
                return ResourceManager.GetString("DEVICE_SELECTION_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file will contain the digital signature of the files to be installed
        ///on the system.
        ///This file will be provided by Microsoft upon certification of your drivers.
        ///.
        /// </summary>
        internal static string LIBUSB_CAT_BODY {
            get {
                return ResourceManager.GetString("LIBUSB_CAT_BODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Version]
        ///Signature = &quot;$Chicago$&quot;
        ///Provider  = %manufacturer%
        ///DriverVer = #DRIVER_DATE#, #DRIVER_VERSION#
        ///Class     = LibUsbDevices
        ///ClassGUID = {EB781AAF-9C70-4523-A5DF-642A87ECA567}
        ///
        ///CatalogFile = #DRIVER_CAT_FILENAME#.cat
        ///CatalogFile.NT = #DRIVER_CAT_FILENAME#.cat
        ///CatalogFile.NTAMD64 = #DRIVER_CAT_FILENAME#_x64.cat
        ///CatalogFile.NTIA64 = #DRIVER_CAT_FILENAME#_ia64.cat
        ///
        ///[ClassInstall]
        ///AddReg=libusb_class_install_add_reg
        ///
        ///[ClassInstall32]
        ///AddReg=libusb_class_install_add_reg
        ///
        ///[libusb_class_ins [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LIBUSB_INF_BODY {
            get {
                return ResourceManager.GetString("LIBUSB_INF_BODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LibUsbDotNet INF Wizard creates windows USB inf/setup packages for use with generic libusb-win32 or WinUSB devices.  This utility allows USB developers to quickly create a generic USB driver package that can be used the windows device manager/add new hardware wizard.
        ///.
        /// </summary>
        internal static string MAINTEXT {
            get {
                return ResourceManager.GetString("MAINTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING! This function makes permanent changes to the windows registry.  Improper use of this utility can permanately remove core system device required by the operating system to function.
        ///USE AT YOUR OWN RISK!.
        /// </summary>
        internal static string REMOVE_DEVICE_WARNING {
            get {
                return ResourceManager.GetString("REMOVE_DEVICE_WARNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file will contain the digital signature of the files to be installed
        ///on the system.
        ///This file will be provided by Microsoft upon certification of your drivers.
        ///.
        /// </summary>
        internal static string WINUSB_CAT_BODY {
            get {
                return ResourceManager.GetString("WINUSB_CAT_BODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Version]
        ///Signature = &quot;$Windows NT$&quot;
        ///Class = WinUsbDevices
        ///ClassGuid={A219BCD5-74D8-4d79-A91F-01F749642227}
        ///Provider = %ProviderName%
        ///CatalogFile=#DRIVER_CAT_FILENAME#.cat
        ///DriverVer = #DRIVER_DATE#, #DRIVER_VERSION#
        ///
        ///; ========== Manufacturer/Models sections ===========
        ///; .ntx86, .ntia64, and .ntamd64
        ///
        ///[Manufacturer]
        ///%ProviderName% = #DRIVER_CAT_FILENAME#,ntx86,ntamd64,ntia64
        ///
        ///[#DRIVER_CAT_FILENAME#.ntx86]
        ///%USB\#DRIVER_CAT_FILENAME#.DeviceDesc% =#DRIVER_CAT_FILENAME#_Install, USB\VID_#VID#&amp;PI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WINUSB_INF_BODY {
            get {
                return ResourceManager.GetString("WINUSB_INF_BODY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Version]
        ///Signature = &quot;$Windows NT$&quot;
        ///Class = WinUsbDevices
        ///ClassGuid={A219BCD5-74D8-4d79-A91F-01F749642227}
        ///Provider = %ProviderName%
        ///CatalogFile=#DRIVER_CAT_FILENAME#.cat
        ///DriverVer = #DRIVER_DATE#, #DRIVER_VERSION#
        ///
        ///; ========== Manufacturer/Models sections ===========
        ///; .ntx86, .ntia64, and .ntamd64
        ///
        ///[Manufacturer]
        ///%ProviderName% = #DRIVER_CAT_FILENAME#,ntx86,ntamd64,ntia64
        ///
        ///[#DRIVER_CAT_FILENAME#.ntx86]
        ///%USB\#DRIVER_CAT_FILENAME#.DeviceDesc% =#DRIVER_CAT_FILENAME#_Install, USB\VID_#VID#&amp;PI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WINUSB2_INF_BODY {
            get {
                return ResourceManager.GetString("WINUSB2_INF_BODY", resourceCulture);
            }
        }
    }
}
